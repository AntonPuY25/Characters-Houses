{"version":3,"sources":["Api/api.ts","Bll/reducers/characterReducer.ts","Bll/selectors/selectors.ts","Common/pagination/paginationPage.tsx","Common/select/select.tsx","Components/Characters/characters.tsx","Bll/reducers/housesReducer.ts","Components/Houses/houses.tsx","Components/errors/page404.tsx","App.tsx","reportWebVitals.ts","Bll/store.ts","index.tsx","Components/Characters/characters.module.scss","Components/Houses/houses.module.scss","Common/pagination/pagination.module.scss"],"names":["instance","axios","create","baseURL","Api","page","gender","culture","get","then","response","data","houseId","initialState","characters","status","error","getStatusAC","type","CharacterReducer","state","actions","getCharacters","getHouse","houses","house","getStatus","PaginationPage","id","useState","pages","setPages","className","s","pagination","to","PATH","Pagination","count","color","onChange","event","sessionStorage","setItem","JSON","stringify","toString","SelectPage","handleChange","FormControl","InputLabel","Select","value","MenuItem","Characters","useParams","useSelector","dispatch","useDispatch","setGender","React","inputValue","setInputValue","useEffect","a","result","getCharactersTC","container","Autocomplete","options","title","onInputChange","newInputValue","getOptionLabel","option","style","width","renderInput","params","TextField","label","variant","target","TableContainer","component","Paper","Table","size","stickyHeader","TableHead","TableRow","TableCell","TableBody","map","character","tableRow","name","aliases","item","died","tableCell","allegiances","substr","length","replace","books","url","getHousesAC","HousesReducer","Houses","getItem","console","log","LinearProgress","Card","CardContent","Typography","titles","region","coatOfArms","seats","diedOut","overlord","swornMembers","back","fontSize","Page404","page404","pageNotFound","startPage","App","exact","path","render","from","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.156e5c2d.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://anapioficeandfire.com/api/',\r\n\r\n})\r\n\r\nexport const Api = {\r\n    getCharacters(page: string, gender: string, culture: string) {\r\n        return instance.get<TypeCharacter[]>(`characters?page=${page}&gender=${gender}&culture=${culture}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    getHouses(houseId: string) {\r\n        return instance.get<TypeResponseDataHouse>(`houses/${houseId}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    }\r\n}\r\nexport type TypeCharacter = {\r\n    aliases: string[]\r\n    allegiances: string[]\r\n    books: string[]\r\n    born: string\r\n    culture: string\r\n    died: string\r\n    father: string\r\n    gender: string\r\n    mother: string\r\n    name: string\r\n    playedBy: string[]\r\n    povBooks: string[]\r\n    spouse: string\r\n    titles: string[]\r\n    tvSeries: string[]\r\n    url: string\r\n}\r\nexport type TypeResponseDataHouse = {\r\n    ancestralWeapons: string[]\r\n    cadetBranches: string[]\r\n    coatOfArms: string\r\n    currentLord: string\r\n    diedOut: string\r\n    founded: string\r\n    founder: string\r\n    heir: string\r\n    name: string\r\n    overlord: string\r\n    region: string\r\n    seats: string[]\r\n    swornMembers: string[]\r\n    titles: string[]\r\n    url: string\r\n    words: string\r\n}","import {Dispatch} from 'redux'\r\nimport {Api, TypeCharacter} from '../../Api/api'\r\n\r\nconst initialState: TypeInitialStateCharacter = {\r\n    characters: [],\r\n    status: 'free',\r\n    error: ''\r\n\r\n\r\n}\r\n\r\nexport const getCharactersAC = (characters: TypeCharacter[]) => {\r\n    return {\r\n        type: '/characters/GET_CHARACTERS',\r\n        characters\r\n\r\n    } as const\r\n}\r\nexport const getStatusAC = (status: TypeStatus) => {\r\n    return {\r\n        type: '/characters/SET_STATUS',\r\n        status\r\n\r\n    } as const\r\n}\r\nexport const setErrorAC = (error: string) => {\r\n    return {\r\n        type: '/characters/SET_ERROR',\r\n        error\r\n\r\n    } as const\r\n}\r\nconst CharacterReducer = (state: TypeInitialStateCharacter = initialState, actions: TypeActions)\r\n    : TypeInitialStateCharacter => {\r\n\r\n    switch (actions.type) {\r\n\r\n        case '/characters/GET_CHARACTERS':\r\n            return {\r\n                ...state,\r\n                characters: actions.characters\r\n            }\r\n        case '/characters/SET_STATUS':\r\n            return {\r\n                ...state,\r\n                status: actions.status\r\n            }\r\n        case '/characters/SET_ERROR':\r\n            return {\r\n                ...state,\r\n                error: actions.error\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport const getCharactersTC = (page: string, gender: string, culture: string) =>\r\n    async (dispatch: Dispatch<TypeActions>) => {\r\n    dispatch(getStatusAC('loading'))\r\n    try {\r\n        let result: TypeCharacter[] = await Api.getCharacters(page, gender, culture)\r\n        dispatch(getStatusAC('success'))\r\n        dispatch(getCharactersAC(result))\r\n    } catch (e) {\r\n        dispatch(getStatusAC('error'))\r\n\r\n    }\r\n\r\n}\r\n\r\ntype TypeActions =\r\n    | ReturnType<typeof getCharactersAC>\r\n    | ReturnType<typeof getStatusAC>\r\n    | ReturnType<typeof setErrorAC>\r\ntype TypeStatus = 'free' | 'loading' | 'error' | 'success'\r\nexport type TypeInitialStateCharacter = {\r\n    characters: TypeCharacter[]\r\n    status: TypeStatus\r\n    error: string\r\n}\r\n\r\n\r\nexport default CharacterReducer","import {AppRootStateType} from '../store'\r\n\r\nexport const getCharacters = (state: AppRootStateType) => {\r\n    return state.characters.characters\r\n}\r\nexport const getHouse = (state: AppRootStateType) => {\r\n    return state.houses.house\r\n}\r\nexport const getStatus= (state: AppRootStateType) => {\r\n    return state.houses.status\r\n}","import React, {ChangeEvent, useState} from 'react'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {Pagination} from '@material-ui/lab'\r\nimport s from './pagination.module.scss'\r\nimport {PATH} from '../../App'\r\n\r\ntype TypePagination = {\r\n    id: string\r\n}\r\nconst PaginationPage: React.FC<TypePagination> = ({id}) => {\r\n    const [pages, setPages] = useState<string>(id || '1')\r\n    return (\r\n        <div className={s.pagination}>\r\n            <Redirect to={PATH.characters + '/' + pages}/>\r\n            <Pagination count={214} color='primary' page={+pages}\r\n                        onChange={(event: ChangeEvent<unknown>, page: number) => {\r\n                            sessionStorage.setItem('page', JSON.stringify(page))\r\n                            setPages(page.toString())\r\n                        }}/>\r\n        </div>\r\n    )\r\n}\r\nexport default PaginationPage","import React from 'react'\r\nimport {FormControl, InputLabel, MenuItem} from '@material-ui/core'\r\nimport Select from '@material-ui/core/Select'\r\ntype TypePropsGender = {\r\n    gender: string\r\n    handleChange:(event: React.ChangeEvent<{ value: unknown }>)=>void\r\n}\r\nconst SelectPage:React.FC<TypePropsGender> = ({gender,handleChange})=>{\r\n\r\n\r\n    return<>\r\n        <FormControl >\r\n            <InputLabel>Gender</InputLabel>\r\n            <Select\r\n                value={gender}\r\n                onChange={handleChange}\r\n            >\r\n                <MenuItem value={'Unknown'}>Unknown</MenuItem>\r\n                <MenuItem value={'Male'}>Male</MenuItem>\r\n                <MenuItem value={'Female'}>Female</MenuItem>\r\n            </Select>\r\n        </FormControl>\r\n    </>\r\n}\r\n\r\nexport default SelectPage","import React, {useEffect, useState} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {getCharactersTC} from '../../Bll/reducers/characterReducer'\r\nimport {Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, TextField} from '@material-ui/core'\r\nimport {NavLink, useParams} from 'react-router-dom'\r\nimport {getCharacters} from '../../Bll/selectors/selectors'\r\nimport {PATH} from '../../App'\r\nimport PaginationPage from '../../Common/pagination/paginationPage'\r\nimport s from './characters.module.scss'\r\nimport SelectPage from '../../Common/select/select'\r\nimport {Autocomplete} from \"@material-ui/lab\"\r\n\r\nconst Characters = () => {\r\n    const {id} = useParams<{ id: string }>()\r\n    const characters = useSelector(getCharacters)\r\n    const dispatch = useDispatch()\r\n    const [gender, setGender] = useState<string>('Unknown')\r\n    const [inputValue, setInputValue] = React.useState('');\r\n    const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n        setGender(event.target.value as string);\r\n    };\r\n    const cultures = [\r\n        {title: 'Valyrian'},\r\n        {title: 'Northmen'},\r\n        {title: 'Braavosi'},\r\n        {title: 'Westeros'},\r\n        {title: 'Stormlands'},\r\n        {title: 'Ironborn'},\r\n        {title: 'Andal'},\r\n        {title: 'Dornish'},\r\n        {title: 'Ghiscari'},\r\n        {title: 'Ghiscari'},\r\n        {title: 'Free Folk'},\r\n        {title: 'Qartheen'},\r\n    ]\r\n    useEffect(() => {\r\n        dispatch(getCharactersTC(id, gender, inputValue))\r\n    }, [dispatch, id, gender, inputValue])\r\n    return <>\r\n        <div className={s.container}>\r\n            <PaginationPage id={id}/>\r\n            <Autocomplete\r\n                options={cultures}\r\n                inputValue={inputValue}\r\n                onInputChange={(event, newInputValue) => {\r\n                    setInputValue(newInputValue);\r\n                }}\r\n                getOptionLabel={(option) => option.title}\r\n                style={{width: 250}}\r\n\r\n                renderInput={(params) =>\r\n                    <TextField {...params}\r\n\r\n\r\n                               label='Search by culture' variant='standard'/>}\r\n            />\r\n            <SelectPage gender={gender} handleChange={handleChange}/>\r\n        </div>\r\n        <TableContainer component={Paper}>\r\n            <Table size='medium' stickyHeader={true}>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Name</TableCell>\r\n                        <TableCell>Alive</TableCell>\r\n                        <TableCell>Gender</TableCell>\r\n                        <TableCell>Culture</TableCell>\r\n                        <TableCell>Allegiances</TableCell>\r\n                        <TableCell>Books</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <div>\r\n\r\n                </div>\r\n                <TableBody>\r\n                    {characters.map(character => (\r\n                        <TableRow className={s.tableRow} key={character.url}>\r\n                            <TableCell>{`${character.name && character.name + ' :'}\r\n                            ${character.aliases.map(item => item)}`}</TableCell>\r\n\r\n                            {character.died ? <TableCell>{`Dead in ${character.died}`}</TableCell> :\r\n                                <TableCell className={s.tableCell}>{`Yes${character.died}`}</TableCell>\r\n                            }\r\n\r\n                            {character.gender ? <TableCell>{character.gender}</TableCell> :\r\n                                <TableCell>Unknown</TableCell>\r\n                            }\r\n                            {character.culture ? <TableCell>{character.culture}</TableCell> :\r\n                                <TableCell>Unknown</TableCell>\r\n                            }\r\n                            <TableCell>\r\n                                {character.allegiances[0] ? <NavLink\r\n                                    to={`${PATH.houses}/${character.allegiances[0] &&\r\n                                    character.allegiances[0].substr(character.allegiances[0].length - 3, 3)\r\n                                        .replace(/[^\\d.-]/g, '')}`}>\r\n                                    {character.allegiances[0] && character.allegiances[0]\r\n                                        .substr(character.allegiances[0].length - 3, 3)\r\n                                        .replace(/[^\\d.-]/g, '')}\r\n                                </NavLink> : 'Unknown'}\r\n                            </TableCell>\r\n                            <TableCell>{character.books.length}</TableCell>\r\n\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n\r\n\r\n    </>\r\n}\r\n\r\nexport default Characters;","import {Dispatch} from 'redux'\r\nimport {Api, TypeResponseDataHouse} from '../../Api/api'\r\n\r\nconst initialState:TypeInitialStateHouses = {\r\n    house: null,\r\n    status:'free',\r\n    error:''\r\n}\r\n\r\nexport const getHousesAC = (houses: TypeResponseDataHouse) => {\r\n    return {\r\n        type: '/houses/GET_HOUSES',\r\n        houses\r\n\r\n    } as const\r\n}\r\nexport const getStatusAC = (status: TypeStatus) => {\r\n    return {\r\n        type: '/houses/SET_STATUS',\r\n        status\r\n\r\n    } as const\r\n}\r\nexport const setErrorAC = (error: string)=>{\r\n    return {\r\n        type: '/characters/SET_ERROR',\r\n        error\r\n\r\n    } as const\r\n}\r\nconst HousesReducer = (state: TypeInitialStateHouses = initialState, actions: TypeActions): TypeInitialStateHouses => {\r\n\r\n    switch (actions.type) {\r\n\r\n        case '/houses/GET_HOUSES':\r\n            return {\r\n                ...state,\r\n                house: actions.houses\r\n            }\r\n        case '/houses/SET_STATUS':\r\n            return{\r\n                ...state,\r\n                status:actions.status\r\n            }\r\n        case \"/characters/SET_ERROR\":\r\n            return{\r\n                ...state,\r\n                error:actions.error\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport const getHousesTC = (houseId:string) => async (dispatch: Dispatch<TypeActions>) => {\r\n    dispatch(getStatusAC('loading'))\r\n    try {\r\n        let result: TypeResponseDataHouse = await Api.getHouses(houseId)\r\n        dispatch(getStatusAC('success'))\r\n        dispatch(getHousesAC(result))\r\n    } catch (e) {\r\n        console.log(e)\r\n        dispatch(getStatusAC('error'))\r\n\r\n    }\r\n\r\n}\r\n\r\ntype TypeActions =\r\n    |ReturnType<typeof getHousesAC>\r\n    |ReturnType<typeof getStatusAC>\r\n    |ReturnType<typeof setErrorAC>;\r\nexport type TypeStatus = 'free' | 'loading'|'error'|'success';\r\nexport type TypeInitialStateHouses = {\r\n    house: TypeResponseDataHouse|null\r\n    status:TypeStatus\r\n    error:string\r\n}\r\n\r\n\r\nexport default HousesReducer;","import React, {useEffect} from 'react'\r\nimport {NavLink, useParams} from 'react-router-dom'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {getHousesTC} from '../../Bll/reducers/housesReducer'\r\nimport {getHouse, getStatus} from '../../Bll/selectors/selectors'\r\nimport {Card, CardContent, LinearProgress, Typography} from \"@material-ui/core\"\r\nimport s from './houses.module.scss'\r\nimport {PATH} from '../../App'\r\nimport HomeIcon from '@material-ui/icons/Home'\r\nimport KeyboardBackspaceIcon from '@material-ui/icons/KeyboardBackspace'\r\n\r\nconst Houses = () => {\r\n    const {id} = useParams<{ id: string }>()\r\n    const dispatch = useDispatch()\r\n    const house = useSelector(getHouse)\r\n    const status = useSelector(getStatus)\r\n    const page = sessionStorage.getItem('page')\r\n    useEffect(() => {\r\n        dispatch(getHousesTC(id))\r\n    }, [dispatch, id])\r\n    return <>\r\n        {status === 'loading' ? <LinearProgress/> : <div className={s.container}>\r\n\r\n            {house && <Card className={s.house}>\r\n                <CardContent>\r\n                    <Typography variant='h4' component='h1'>\r\n                        {house.name}\r\n                    </Typography>\r\n                    <p>{house.titles}</p>\r\n                    <p><b>Region:</b>{house.region}</p>\r\n                    <p><b>Coat of Arms:</b>{house.coatOfArms}</p>\r\n                    <p><b>Seats:</b> {house.seats}</p>\r\n                    <p><b>Has died out :</b> {house.diedOut ? house.diedOut : 'No'}</p>\r\n                    <p><b>The Lord's House :</b> {house.overlord ?\r\n                        <NavLink\r\n                            to={`${PATH.houses}/${house.overlord\r\n                                .substr(house.overlord.length - 3, 3)\r\n                                .replace(/[^\\d.-]/g, '')}`}>\r\n                            <HomeIcon color={'action'}/>\r\n\r\n                        </NavLink>\r\n                        : 'No'}\r\n                    </p>\r\n                    <p><b>Number of Cadet Branches:</b> {house.swornMembers.length}</p>\r\n\r\n                    <div className={s.back}>\r\n                        <NavLink to={`${PATH.characters + '/'}${page ? page : '1'}`}>\r\n                            <KeyboardBackspaceIcon fontSize={'large'}/>\r\n                        </NavLink>\r\n                    </div>\r\n                </CardContent>\r\n\r\n            </Card>}\r\n        </div>}\r\n    </>\r\n}\r\n\r\nexport default Houses","import React from 'react'\r\n\r\nconst Page404 = () => {\r\n    return <>\r\n        Page404\r\n    </>\r\n}\r\n\r\nexport default Page404","import React from 'react'\nimport './App.css'\nimport Characters from './Components/Characters/characters'\nimport Houses from './Components/Houses/houses'\nimport Page404 from './Components/errors/page404'\nimport {HashRouter, Redirect, Route, Switch} from 'react-router-dom'\n\nexport const PATH = {\n    characters: '/characters',\n    houses: '/houses',\n    page404: '/page404',\n    pageNotFound: '*',\n    startPage: '/'\n}\n\nfunction App() {\n\n    return (\n        <div className='App'>\n            <HashRouter>\n\n                <Switch>\n                    <Route exact path={PATH.startPage}\n                           render={() => <Characters/>}/>\n                    <Route path={PATH.characters + '/:id'}\n                           render={() => <Characters/>}/>\n                    <Route path={PATH.houses + '/:id'}\n                           render={() => <Houses/>}/>\n                    <Route path={PATH.page404}\n                           render={() => <Page404/>}/>\n\n                    <Redirect from={PATH.pageNotFound} to={PATH.page404}/>\n                </Switch>\n\n\n            </HashRouter>\n        </div>\n    );\n}\n\nexport default App","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {createStore} from 'redux'\r\nimport {applyMiddleware} from 'redux'\r\nimport {combineReducers} from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport CharacterReducer from './reducers/characterReducer'\r\nimport HousesReducer from './reducers/housesReducer'\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n  characters:CharacterReducer,\r\n  houses:HousesReducer\r\n})\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./Bll/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n    <App />\n      </Provider>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"characters_container__1h_4p\",\"tableRow\":\"characters_tableRow__TAZv_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"houses_container__1K-_k\",\"house\":\"houses_house__3Rqvb\",\"photo\":\"houses_photo__X8mwl\",\"back\":\"houses_back__289k8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pagination\":\"pagination_pagination__2CaGm\"};"],"sourceRoot":""}